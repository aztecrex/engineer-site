---
id: host-easy
title: Host Easy
published: 2017-01-17T15:00-0800
code: https://github.com/aztecrex/engineer-site
series: An Engineer's Site
installment: 2
---
# Host Easy

Or, _You too can have a website for only micro-pennies a day_

This is a follow-on to the original "Adventures in Tech Blogging"
article below. The code for this site is on
[GitHub](https://github.com/aztecrex/engineer-site).

## Goodbye GitHub Pages

Once I decided to make this site a React + Redux thing, I started
to question GitHub Pages as the host. With GHP, my site address
would be https://aztecrex.github.io which is not _horrible_ but
I had been questioning the whole Aztec Rex thing anyway. I mean,
it was funny when the movie aired but really, should it be my
developer identity for _ever_?

I had owned _gregwiley.com_ for a while. Maybe it should be the
domain for my site (I know, right?). To do that I needed to host
the site on Not-GitHub. Most everything I write runs on AWS so
that seemed like a simple choice. Also, I had just helped a
co-worker get a static site running on S3 + CloudFront so the configs
were fresh in my mind.

<iframe width="560" height="315" src="https://www.youtube.com/embed/tDacjrSCeq4" frameborder="0" allowfullscreen></iframe>

## Be Devopsy

I want you to have a happy, carefree developer life so here
is some important advice you will probably ignore to your eternal
peril: _never use the AWS console to provision anything_.

Provisioning through individual CLI commands is nearly as
bad.

Please learn to _program_ your infrastructure. It can be painful to
learn, but the first time you are able to completely tear down
all the things and re-create them with a single command, the
veil will be lifted and you will sing, no, dance at the wonder
of the world. You will be able to make _incremental_ infrastructure
changes without fear, knowing you can revert at the speed of Git.

There are many ways to do it, use the AWS SDK for your favorite
language, use CloudFormation, download the latest whiz-bang
cloudkit. Just never store any details of your infrastructure
in your _brain_. Your brain is needed to develop software, start a
company, or write a screenplay. If you use part of your brain to store
infrastructure details, you rob the world of your best self.

## CloudFormation

For this project, I decided to use CloudFormation. CloudFormation
is about as low-level you can get for AWS devops but it can express
most any architecture you can imagine. For the engineer site,
I would need essentially three resources in a CloudFormation template:

* An S3 Bucket to hold the content
* A CloudFront distribution to serve the content
* A Route53 domain for a friendly URL.

The final code is in the `/deploy/infrastructure.yml`. The initial template
actually consisted of four resources, "Origin," "CDN," "OriginAccessPolicy,"
and "Domains."

### Origin

_Origin_ is the S3 bucket that will store the site content. An
S3 bucket is just a transactional object store. You put arbitrary, named
hunks of data into it and retrieve them when you need them.
In this case, the bucket holds the contents of the `/build` directory
created by Webpack `npm run build`.

### CDN

_CDN_ is the CloudFront distribution. A distribution is not necessary to
serve web content, you can do that with S3 directly, but CloudFront
has some advantages:

* you can use any domain you want, including your zone apex. Direct web
hosting from S3 requires that you name your bucket the same as your
domain. Which means if anyone in the world already has a bucket with
your domain, you can't use S3 to serve your site
* you get a capable _content delivery network_ that caches your content
to edge locations near your users. You generally get more consistent
performance through CloudFront than from S3 directly even if you don't
need the caching benefit
* it can be a little cheaper. It's not much difference but AWS has
made cached delivery a better financial proposition than delivery
direct from S3.

I chose CloudFront for the zone apex capability and to de-couple the bucket
name from domain. The operating cost was almost exactly the same so the
only downside was the need for some extra template configuration.

### OriginAccessPolicy

_OriginAccessPolicy_ designates rules to access the Origin bucket.
This is where my template diverges from others you may find. They
will often tell you to make the Origin access _public read_. It makes
the configuration a little simpler but it means your content can be
reached through the CDN and the S3 bucket. An arguably better design
for both security and operation will allow access through only one
mechanism.

So I locked down the bucket access with an _Origin Access Identity (OAI)_.
Now, only the CloudFront distribution could access my content, meaning
it could only be delivered through the CDN.

One wrinkle is that, after all these years, AWS still does not allow you
to provision an OAI through CloudFormation. So I had to created one
through the CLI, then supply its names to the template. In a future
revision I may prefer a custom CloudFormation resource to do this.

### Domains

The _Domains_ resource is a resource record group that adds two DNS
resource records to a _Route 53_ zone. It adds an A record for
_gregwiley.com_ and a CNAME for _www.gregwiley.com_.

The A record is an _alias_ record. Aliases are a feature of Route 53
that allow an A record to point to potentially changing IP addresses.
In the case of CloudFront, the IP addresses can change as Amazon sees
fit. An alias ensures that the A record remains valid at all times.

The CNAME record simply points to _gregwiley.com_, ensuring better
reachability for the site.


## Final Touches

For SEO (don't laugh), I wanted access to occur through only one domain. So if someone typed _www.gregwiley.com_ or a browser tried to be helpful
and assume that domain, I wanted the browser to be redirected to
_gregwiley.com_.

I didn't want to spin up a server (hourly charges) to do the redirect
so I used a built-in capability of S3. S3 allows you to
redirect _every request_ to a prescribed URL. It would mean dedicating
a bucket to the purpose but there would be no additional cost since
nothing would be stored in it.  I added two new resources to the
template, _RedirectOrigin_ and _RedirectDistribution_. The first is
a bucket configured to redirect all requests to _gregwiley.com_. The
second is a CloudFront distribution to front it with the www domain.

Another method would have been to use the redirect rules capability
of S3 but that is more than is needed for this simple feature.

Finally, I had to point the two domains to the two separate CloudFront
distributions.

## Provision

To bring up all the infrastructure now just requires a single
AWS CLI command:
`aws cloudformation create-stack --stack-name engineer-site --template-body file://infrastructure.yml`

To update the infrastructure after modifying it:
`aws cloudformation update-stack --stack-name engineer-site --template-body file://infrastructure.yml`

I can even bring it up with a different stack name (providing
a different domain name parameter) to test new configurations before
making those changes on the real site.

The template requires that the zone is already hosted in Route53
and that I have provisioned an Origin Access Identity but, other than
that, it's really easy to use.

## But It's Not Free

Cost is an important consideration choosing a hosting architecture.
The GitHub Pages option was free. In this design, there will
be a few service costs.

### Storage

S3 storage is billed monthly based on how much data is
stored. For US standard storage, the cost is $.023 per GB-month
in 128KB-month increments. With the Webpack JS maps, my site is
currently 2.1MB which puts me at about $.005 per month for
storage.

### Data Transfer

Data transfers in to S3 used to be charged the same as transfers
out but now transfers in are free.

Data transfers to CloudFront are also free.

### Content Delivery

CloudFront charges are the only cost that depends on traffic. For
delivery to North America and Europe, the cost is $.085 per GB.
That's a little less than the $.09 per GB for non-CloudFront
delivery direct from S3 to those same regions.

Delivery to East Asia and Australia is $.14 per GB, India $.17 per GB,
and South America, $.25 per GB. Volume pricing is available but these
are good numbers for planning a small site.

### DNS

Route 53 is a bit expensive at $.50 per zone-month. My non-AWS
authoritative provider costs only $22 per 40-zone-year. I bit the bullet and
moved gregwiley.com over to Route 53 to take advantage
of an an alias record for the zone apex. I also got the advantage
of common infrastructure specification through CloudFront.

If you don't want to incur the extra cost, you can use a
non-AWS provider. Your site won't be able to use the zone apex
but that might not matter.  As with any cloud endeavor, script
it even at your non-AWS provider. I may dive into CloudFormation
_custom resources_ in a future article to show how you could
manage such an outside service directly in CloudFormation.

## Metrics

I added a story to the backlog to start capturing metrics.
The delivery cost makes measurement important. If hardly anyone
visits the site, it will not matter but if costs start to go up,
I'll want insight about usage.


Get the code for this site on
[GitHub](https://github.com/aztecrex/engineer-site).
