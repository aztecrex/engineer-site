AWSTemplateFormatVersion: '2010-09-09'
Parameters:
    # this is so dumb. AWS won't allow us to create an OAI from within
    # a CF template. So we have to provide one. This is a temporary workaround.
    # Eventually we should create a custom resource to either create these
    # things or at least retrieve the ids from a (encrypted, yes) configuration
    # store. Both the access identity and access principal refer to the same
    # thing. Each is used in a different context.
  OriginAccessIdentity:
    Type: String
    Default: origin-access-identity/cloudfront/E3DIS3913OEPXE
    Description: >
      An origin access identity. These cannot be created through
      cloudformation so create one before you get here or, if you are me, use
      this handy default.
  OriginAccessPrincipal:
    Type: String
    Default: 1b4f36734d90d4b10a51e6ab9ff5542ed26706ca309e844f48f5e43764acec0bf20a8c12a2143c81aaecd7f5ac285f0c
    Description: >
      An origin access principal. These cannot be created through
      cloudformation so create one before you get here or, if you are me, use
      this handy default.
  DNSZone:
    Type: String
    Default: gregwiley.com

Resources:
  # Bucket where the static site content lives
  # a deletion policy of "retain" allows us to
  # delete the stack without emptying the bucket
  # but it means we have to delete the bucket
  # manually. A better sollution would provide
  # a means to delete the contents and the bucket
  # since we can create the site at will but AWS
  # doeesn't have  direct way to do that. Maybe
  # a custom resource could be used.
  Origin:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  # Allows only the generated Cloudfront principal
  # to access the contents of the bucket.
  OriginAccessPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "Origin"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub arn:aws:s3:::${Origin}/*
            Principal:
              CanonicalUser:
                Ref: OriginAccessPrincipal

  # AWS free certificate for content distribution. When
  # this spins up, AWS sends a verification message to
  # the domain owner. The stack won't continue provisioning
  # until verification link is clicked and cert request
  # is verified
  CDNCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DNSZone

  # The main CloudFront distribution. The origin server
  # is the Origin S3 Bucket
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [Origin, DomainName]
            Id: contentOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Ref OriginAccessIdentity
        Enabled: 'true'
        Comment: Distribute the engineer site
        DefaultRootObject: index.html
        CustomErrorResponses:
          # this how we get index.html to be served at any path
          # a 403 response (not authorized but it actually means
          # it wasn't found) from S3 causes CloudFront to responsd
          # with index.html and response 200.
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Aliases:
          - !Sub ${DNSZone}
        ViewerCertificate:
          AcmCertificateArn: !Ref CDNCertificate
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: contentOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all


  # This bucket just redirects. It is how we get redirect
  # requests for www.domain.com to domain.com. In the future
  # we may be able to build this into redirect rules in the
  # Origin bucket.
  RedirectOrigin:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName : !Ref DNSZone
          Protocol : https

  # AWS free certificate for redirext distribution. When
  # this spins up, AWS sends a verification message to
  # the domain owner. The stack won't continue provisioning
  # until verification link is clicked and cert request
  # is verified
  RedirectCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "*.${DNSZone}"

  # The distribution that delivers the recirects supplied by
  # RedirectOrigin
  RedirectDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${RedirectOrigin}.s3-website-us-east-1.amazonaws.com
            Id: redirectOrigin
            CustomOriginConfig:
                OriginProtocolPolicy: http-only

        Enabled: 'true'
        Comment: Redirect to the canonical site
        Aliases:
          - !Sub www.${DNSZone}
        ViewerCertificate:
          AcmCertificateArn: !Ref RedirectCertificate
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          TargetOriginId: redirectOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all

  Domains:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${DNSZone}.
      RecordSets:
        # use the apex zone name as the main site domain
        - Name: !Sub ${DNSZone}.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [CDN, DomainName]
        # handle browser-genned or human-typed www. requests
        - Name: !Sub www.${DNSZone}.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [RedirectDistribution, DomainName]

Outputs:
  ContentStore:
    Value: !Ref Origin
  Link:
    Value: !Sub http://${DNSZone}
